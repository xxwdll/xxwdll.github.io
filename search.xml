<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git推送多个仓库</title>
      <link href="/2019/09/20/009git%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/"/>
      <url>/2019/09/20/009git%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>github又莫名的访问不上了，ping能通，但是clone提示失败，换个IP就可以，应该是IP被封了，现在准备将存在gitHub上的内容同步提交到码云，以便在github访问不了时，可以通过码云进行提交同步</p><h2 id="添加远程地址"><a href="#添加远程地址" class="headerlink" title="添加远程地址"></a>添加远程地址</h2><p>多个不同的仓库需要不同的别名，如码云–gitee</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitee 码云地址</span><br><span class="line">#通过以下命令查看</span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>在提交脚本中加入这一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u gitee master</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/qq_36667170/article/details/79336760" target="_blank" rel="noopener">链接1</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务迁移</title>
      <link href="/2019/09/19/008%E6%9C%8D%E5%8A%A1%E8%BF%81%E7%A7%BB/"/>
      <url>/2019/09/19/008%E6%9C%8D%E5%8A%A1%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<p>最近vlutr的服务器总是访问不上，换了个新的vps后，没过多久又访问不了了。。。。某种神秘力量所致？<br>出于无奈，如果以后要这样频繁的迁移vps的话，还是要有必要记录下迁移过程的，不定时更新。 </p><h2 id="准备服务器"><a href="#准备服务器" class="headerlink" title="准备服务器"></a>准备服务器</h2><p>登录vultr<a href="https://my.vultr.com" target="_blank" rel="noopener">官网</a>，登录部署新服务器，部署后需要通过<a href="http://ping.chinaz.com/" target="_blank" rel="noopener">站长之家</a>检测ip<br>执行以下命令，配置ssr</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh</span><br><span class="line">wget -N --no-check-certificate https://freed.ga/kernel/ruisu.sh &amp;&amp; bash ruisu.sh</span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置<a href="https://github.com/settings/keys" target="_blank" rel="noopener">github</a>的密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>将生成公钥，粘贴到github的SSH选项中,接着配置本地git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git</span><br><span class="line">git config --global user.name XXX</span><br><span class="line">git config --global user.email XXX</span><br></pre></td></tr></table></figure><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>注意需要安装git再执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/xxwdll/shell_repo/master/05hexo/hexo_build.sh &amp;&amp; bash hexo_build.sh</span><br></pre></td></tr></table></figure><p>个人配置脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/xxwdll/shell_repo/master/05hexo/hexo_conf.sh &amp;&amp; bash hexo_conf.sh</span><br></pre></td></tr></table></figure><p>防火墙配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port=4000/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p><a href="https://qizhanming.com/blog/2018/08/06/how-to-install-nginx-on-centos-7" target="_blank" rel="noopener">参考链接</a><br>下载安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm &amp;&amp; yum -y install nginx</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><p>个人配置恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/xxwdll/shell_repo/master/05hexo/nginx_conf.sh &amp;&amp; bash nginx_conf.sh</span><br></pre></td></tr></table></figure><p>防火墙设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=80/udp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="ip变更"><a href="#ip变更" class="headerlink" title="ip变更"></a>ip变更</h2><p>登录<a href="https://dns.console.aliyun.com/#/dns/setting/xxwdll.top" target="_blank" rel="noopener">阿里域名控制台</a>更改域名<br>更改push脚本中的ip，以及设置本机和服务器的ssh免秘登录</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> nginx </tag>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql关联查询</title>
      <link href="/2019/09/12/007mysql%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2/"/>
      <url>/2019/09/12/007mysql%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>关联查询：数据查询是Mysql数据库管理最重要的一个功能，连接查询是关系型数据库最主要的查询，包括了内连接(INNER JOIN)，外链接(LEFT JOIN，RIGHT JOIN)等，通过连接可以实现多个表的同时查询。<br>基本定义:<br>　　left join （左连接）：返回包括左表中的所有记录和右表中连接字段相等的记录。<br>　　right join （右连接）：返回包括右表中的所有记录和左表中连接字段相等的记录。<br>　　inner join （等值连接或者叫内连接）：只返回两个表中连接字段相等的行。<br>　　full join （全外连接）：返回左右表中所有的记录和左右表中连接字段相等的记录。  </p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="新建两张表"><a href="#新建两张表" class="headerlink" title="新建两张表"></a>新建两张表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`a_table`</span> (</span><br><span class="line">  <span class="string">`a_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`a_name`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`a_part`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`b_table`</span> (</span><br><span class="line">  <span class="string">`b_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`b_name`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`b_part`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`a_table`</span> <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'赵'</span>,<span class="string">'销售'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`a_table`</span> <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">'钱'</span>,<span class="string">'技术'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`a_table`</span> <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">'孙'</span>,<span class="string">'人事'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`a_table`</span> <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">'李'</span>,<span class="string">'销售'</span>);</span><br></pre></td></tr></table></figure><img src="/2019/09/12/007mysql关联查询/a.PNG"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`b_table`</span> <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">'钱'</span>,<span class="string">'技术'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`b_table`</span> <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">'李'</span>,<span class="string">'销售'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`b_table`</span> <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">'周'</span>,<span class="string">'技术'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`b_table`</span> <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="string">'吴'</span>,<span class="string">'人事'</span>);</span><br></pre></td></tr></table></figure><img src="/2019/09/12/007mysql关联查询/b.PNG"><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a_table a <span class="keyword">inner</span> <span class="keyword">join</span> b_table b <span class="keyword">on</span> a.a_id = b.b_id;</span><br></pre></td></tr></table></figure><img src="/2019/09/12/007mysql关联查询/inner.PNG">  <p>将表a_table和表b_table中a.id和b.id相同的行筛选出，相当于求交集  </p><img src="/2019/09/12/007mysql关联查询/inner2.png"> <h2 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a_table a <span class="keyword">left</span> <span class="keyword">join</span> b_table b <span class="keyword">on</span> a.a_id = b.b_id;</span><br></pre></td></tr></table></figure><img src="/2019/09/12/007mysql关联查询/left.PNG">  <p>左表(a_table)的记录将会全部表示出来，而右表(b_table)只会显示符合搜索条件的记录。右表记录不足的地方均为NULL。  </p><img src="/2019/09/12/007mysql关联查询/left2.png">  <h2 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a_table a <span class="keyword">right</span> <span class="keyword">join</span> b_table b <span class="keyword">on</span> a.a_id = b.b_id;</span><br></pre></td></tr></table></figure><img src="/2019/09/12/007mysql关联查询/right.PNG">  <p>和左连接规则相反  </p><img src="/2019/09/12/007mysql关联查询/right2.png"> <h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/weixin_39220472/article/details/81193617" target="_blank" rel="noopener">链接1</a><br><a href="https://blog.csdn.net/plg17/article/details/78758593" target="_blank" rel="noopener">链接2</a></p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql主从同步</title>
      <link href="/2019/09/12/006mysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/"/>
      <url>/2019/09/12/006mysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>主从同步大体的原理是：主服务器(master)进行的操作将会被记录在Binary日志文件中，从服务器(slave)创建一个IO线程把Binary日志文件中的数据写入自身Relay日志文件中。因此主服务器需要开启Binary日志文件，从服务器需要开启Relay日志文件，主服务器中的MySQL每次操作都会记录到Binary日志文件中。<br>用之前的一台docker搭建的mysql服务器作为主服务，另外重新再准备一台服务器搭建mysql来做同步。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>现准备一台服务器，安装mysql服务<br>下载安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum repolist enabled | grep <span class="string">"mysql.*-community.*"</span></span><br><span class="line">yum install mysql-community-server</span><br><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><p>修改密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line">vi /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">skip-grant-tables</span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line">service mysqld retstart</span><br><span class="line">mysql -uroot</span><br><span class="line">mysql&gt;use mysql;</span><br><span class="line">mysql&gt;update user <span class="built_in">set</span> password = password(<span class="string">'new password'</span>) <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line">mysql&gt;<span class="built_in">exit</span>;</span><br><span class="line">sed -i <span class="string">'/skip-grant-tables/d'</span> /etc/my.cnf</span><br><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><h2 id="docker中mysql-master-配置"><a href="#docker中mysql-master-配置" class="headerlink" title="docker中mysql(master)配置"></a>docker中mysql(master)配置</h2><p>进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#docker_mysql是容器名称</span></span><br><span class="line">docker <span class="built_in">exec</span> -it docker_mysql bash</span><br><span class="line"><span class="comment">#容器内安装vim</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/mysql</span><br><span class="line">vim my.cnf</span><br><span class="line"><span class="comment">#添加如下配置</span></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment">## 同一局域网内注意要唯一</span></span><br><span class="line">server-id=100  </span><br><span class="line"><span class="comment">## 开启二进制日志功能，可以随便取（关键）</span></span><br><span class="line"><span class="built_in">log</span>-bin=mysql-bin</span><br><span class="line"><span class="comment">#配置完成后需要重启</span></span><br><span class="line">service mysql restart</span><br><span class="line"><span class="comment">#重启容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">docker start docker-mysql</span><br></pre></td></tr></table></figure><p>创建用于同步的用户’slave’,并给予REPLICATION SLAVE、REPLICATION CLIENT同步权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it docker_mysql bash;</span><br><span class="line">mysql -uroot -p<span class="string">'password'</span></span><br><span class="line">mysql&gt;CREATE USER <span class="string">'slave'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'password'</span>;</span><br><span class="line">mysql&gt;GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="string">'slave'</span>@<span class="string">'%'</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><h2 id="服务器中mysql-slave-配置"><a href="#服务器中mysql-slave-配置" class="headerlink" title="服务器中mysql(slave)配置"></a>服务器中mysql(slave)配置</h2><p>/etc/my.cnf增加配置如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="comment">## 设置server_id,注意要唯一</span></span><br><span class="line">server-id=101  </span><br><span class="line"><span class="comment">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span></span><br><span class="line"><span class="built_in">log</span>-bin=mysql-slave-bin   </span><br><span class="line"><span class="comment">## relay_log配置中继日志</span></span><br><span class="line">relay_log=edu-mysql-relay-bin</span><br></pre></td></tr></table></figure><h2 id="链接master和slave"><a href="#链接master和slave" class="headerlink" title="链接master和slave"></a>链接master和slave</h2><p>进入mysql(master)，执行show master status;  </p><img src="/2019/09/12/006mysql主从同步/001.PNG">  <p>进入mysql(slave)，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=<span class="string">'149.28.28.145'</span>, master_user=<span class="string">'slave'</span>, master_password=<span class="string">'password'</span>, master_port=3306,master_log_file=<span class="string">'mysql-bin.000001'</span>, master_log_pos=769, master_connect_retry=30;</span><br></pre></td></tr></table></figure><p>master_log_file：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值<br>master_log_pos：从哪个 Position 开始读，即上文中提到的 Position 字段的值<br>master_connect_retry：如果连接失败，重试的时间间隔，单位是秒，默认是60秒<br>查询slave状态,正常情况下，SlaveIORunning 和 SlaveSQLRunning 都是No，因为我们还没有开启主从复制过程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;show slave status;</span><br></pre></td></tr></table></figure><img src="/2019/09/12/006mysql主从同步/002.PNG"><p>开启slave，再次查询SlaveIORunning 和 SlaveSQLRunning 都是Yes，说明主从复制已经开启。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;start slave;</span><br><span class="line">mysql&gt;show slave status;</span><br></pre></td></tr></table></figure><img src="/2019/09/12/006mysql主从同步/003.PNG">  <p>此时主从同步已开启，可以进行测试，在master中创建一个数据库，再检查slave中是否存在该数据库<br>master  </p><img src="/2019/09/12/006mysql主从同步/master.PNG"><p>slave  </p><img src="/2019/09/12/006mysql主从同步/slave.PNG"><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/songwenjie/p/9371422.html" target="_blank" rel="noopener">链接1</a></p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> install </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centsos7下docker简单安装及使用</title>
      <link href="/2019/09/05/005docker%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/09/05/005docker%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Docker是一个虚拟环境容器，可以将你的开发环境、代码、配置文件等一并打包到这个容器中，并发布和应用到任意平台中。比如，你在本地用Python开发网站后台，开发测试完成后，就可以将Python3及其依赖包、Flask及其各种插件、Mysql、Nginx等打包到一个容器中，然后部署到任意你想部署到的环境。<br>Docker用法:从仓库（一般为DockerHub）下载（pull）一个镜像，Docker执行run方法得到一个容器，用户在容器里执行各种操作。Docker执行commit方法将一个容器转化为镜像。Docker利用login、push等命令将本地镜像推送（push）到仓库。其他机器或服务器上就可以使用该镜像去生成容器，进而运行相应的应用程序了。   </p><h2 id="下载安装脚本"><a href="#下载安装脚本" class="headerlink" title="下载安装脚本"></a>下载安装脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># remove old version</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove all docker data </span></span><br><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#  preinstall utils </span></span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># add repository</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># make cache</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="comment"># install the latest stable version of docker</span></span><br><span class="line">sudo yum install -y docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># start deamon and enable auto start when power on</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># add current user </span></span><br><span class="line">sudo groupadd docker</span><br><span class="line">sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载镜像</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"><span class="comment">#设置目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir mysql &amp;&amp; <span class="built_in">cd</span> mysql</span><br><span class="line">mkdir data logs conf</span><br><span class="line"><span class="comment">#启动镜像</span></span><br><span class="line">docker run -p 3306:3306 --name docker_mysql -v <span class="variable">$PWD</span>/conf:/etc/mysql/conf.d -v <span class="variable">$PWD</span>/logs:/logs -v <span class="variable">$PWD</span>/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=12345 -d mysql:5.7</span><br><span class="line"><span class="comment">#查看进程</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment">#进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it docker_mysql bash</span><br><span class="line"><span class="comment">#登录mysql</span></span><br><span class="line">mysql -uroot -p12345</span><br><span class="line">mysql&gt; grant all privileges on *.* to <span class="string">'root'</span>@<span class="string">'%'</span> identified by <span class="string">'12345'</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><h2 id="卸载docker中mysql"><a href="#卸载docker中mysql" class="headerlink" title="卸载docker中mysql"></a>卸载docker中mysql</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop docker_mysql</span><br><span class="line">docker rm docker_mysql</span><br><span class="line">docker rmi `docker images | grep mysql|awk <span class="string">'&#123;print $3&#125;'</span>`</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/e6b946c79542" target="_blank" rel="noopener">安装参考</a><br><a href="https://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="noopener">使用参考</a><br><a href="https://zhuanlan.zhihu.com/p/23599229" target="_blank" rel="noopener">入门参考</a> </p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> install </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再生龙启动盘制作</title>
      <link href="/2019/09/04/004Clonezilla/"/>
      <url>/2019/09/04/004Clonezilla/</url>
      
        <content type="html"><![CDATA[<p>再生龙（Clonezilla）是一个免费的灾难恢复、硬盘克隆、硬盘映像档制作的部署和解决方案，由台湾的高速网络与计算中心所开发，以GNU通用公共许可协议（GPL）发布。可以用来做系统镜像，再复制到别的机器上，或者用于自身系统恢复。<br><a href="https://laucyun.com/6983772aca95eb11b02862087b0927d0.html" target="_blank" rel="noopener">参考文章</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>登录<a href="http://www.clonezilla.org/downloads.php" target="_blank" rel="noopener">官网</a><br>我选择的是 alternative stable - 20190707-disco</p><img src="/2019/09/04/004Clonezilla/001.JPG">  <p>选择amd4和iso，进行下载</p><img src="/2019/09/04/004Clonezilla/002.JPG">  <h2 id="制作引导盘"><a href="#制作引导盘" class="headerlink" title="制作引导盘"></a>制作引导盘</h2><p>打开UltraISO，装载clonezilla镜像  </p><img src="/2019/09/04/004Clonezilla/UltraISO-open.png">  <p>选择clonezilla镜像  </p><img src="/2019/09/04/004Clonezilla/UltraISO-load-clonezilla.png">  <p>插入U盘，选启动 -&gt;写入硬盘映像  </p><img src="/2019/09/04/004Clonezilla/UltraISO-make-image.png">  <p>选择选入，启动盘制作完成  </p><img src="/2019/09/04/004Clonezilla/UltraISO-write-to-u-disk.png">  <h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li>190918更新<br>使用新版本的再生龙网络镜像速度很慢，使用1.2版本的没有问题<br><a href="https://sourceforge.net/projects/clonezilla/files/clonezilla_live_stable/OldFiles/" target="_blank" rel="noopener">下载连接</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> install </tag>
            
            <tag> 再生龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos下jupyter notebook的安装</title>
      <link href="/2019/09/04/003centos%E5%AE%89%E8%A3%85jupyternotebook/"/>
      <url>/2019/09/04/003centos%E5%AE%89%E8%A3%85jupyternotebook/</url>
      
        <content type="html"><![CDATA[<p>看网上学习python很多人都在用jupyter,目前也在自己服务器上搭建了一个用来写爬虫及练习python，后来发现jupyter自带命令行工具，有时我连接自己服务器不用xshell，直接在网页上通过jupyter也很方便。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>首先确保python的安装，<a href="https://www.jianshu.com/p/c66265eeab7" target="_blank" rel="noopener">参考</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/soft/jupyter &amp;&amp; <span class="built_in">cd</span> /home/soft/jupyter</span><br><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure><h2 id="将端口8888-加入防火墙"><a href="#将端口8888-加入防火墙" class="headerlink" title="将端口8888 加入防火墙"></a>将端口8888 加入防火墙</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port=8888/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=8888/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="配置jupyter"><a href="#配置jupyter" class="headerlink" title="配置jupyter"></a>配置jupyter</h2><p>查看配置文件地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config --allow-root</span><br></pre></td></tr></table></figure><p>进入提示配置文件地址，我的为(/root/.jupyter/jupyter_notebook_config.py)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /root/.jupyter/jupyter_notebook_config.py</span><br><span class="line"><span class="comment">#改以下内容</span></span><br><span class="line">c.NotebookApp.allow_root =True</span><br><span class="line">c.NotebookApp.ip=<span class="string">'*'</span></span><br><span class="line">c.NotebookApp.open_browser = False</span><br></pre></td></tr></table></figure><p>修改密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook password</span><br></pre></td></tr></table></figure><h2 id="重启脚本"><a href="#重启脚本" class="headerlink" title="重启脚本"></a>重启脚本</h2><p>通过该脚本进行重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">this_pid=`lsof -i:8888|awk <span class="string">'&#123;print $2&#125;'</span>|uniq|grep [0-9]`</span><br><span class="line"><span class="built_in">kill</span> -9 <span class="variable">$&#123;this_pid&#125;</span></span><br><span class="line"><span class="built_in">cd</span> /home/soft/jupyter</span><br><span class="line">rm -f nohup.out jupyter_server.log</span><br><span class="line">nohup jupyter notebook &gt; jupyter_server.log &amp;</span><br><span class="line">sleep 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> install </tag>
            
            <tag> jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git同步本地文件夹</title>
      <link href="/2019/09/01/002git%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>/2019/09/01/002git%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<p>hexo不支持在线编辑功能，因此想到通过git同步windows下文件到github中，linux服务器再通过github同步，这样可以方便的进行本地进行文章的编辑，提交的话双击脚本在网站上就可以查看刚刚编辑好的内容，这样就可以省去了在服务器上操作的过程，全部在本地执行。</p><h1 id="linux-端配置"><a href="#linux-端配置" class="headerlink" title="linux 端配置"></a>linux 端配置</h1><h2 id="初始化文件夹"><a href="#初始化文件夹" class="headerlink" title="初始化文件夹"></a>初始化文件夹</h2><p>先在GitHub上建好仓库，进入要同步的文件夹，进行同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"xxwdll"</span></span><br><span class="line">git config --global user.email <span class="string">"gqoyvf@163.com"</span></span><br><span class="line"><span class="built_in">cd</span> /usr/blog/<span class="built_in">source</span>/</span><br><span class="line">git init</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:xxwdll/myblog.git</span><br><span class="line"><span class="built_in">cd</span> myblog/</span><br></pre></td></tr></table></figure><h2 id="上传文件夹内容"><a href="#上传文件夹内容" class="headerlink" title="上传文件夹内容"></a>上传文件夹内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp ../_posts/* ./</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'update'</span></span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">mv _posts _posts_bak</span><br><span class="line">mv myblog _posts</span><br></pre></td></tr></table></figure><h2 id="更新脚本"><a href="#更新脚本" class="headerlink" title="更新脚本"></a>更新脚本</h2><p>将这个脚本设为定时脚本，定时从github上同步内容<br>1 * * * * /usr/blog/update_blog.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /usr/blog/<span class="built_in">source</span>/_posts</span><br><span class="line">git fetch origin master:temp</span><br><span class="line">git merge temp</span><br><span class="line">git branch -d temp</span><br></pre></td></tr></table></figure><h1 id="windows-端配置"><a href="#windows-端配置" class="headerlink" title="windows 端配置"></a>windows 端配置</h1><h2 id="更新目录到本地"><a href="#更新目录到本地" class="headerlink" title="更新目录到本地"></a>更新目录到本地</h2><p>以后只需在widows端这个文件夹下进行编辑即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:xxwdll/myblog.git</span><br></pre></td></tr></table></figure><h2 id="提交及更新脚本"><a href="#提交及更新脚本" class="headerlink" title="提交及更新脚本"></a>提交及更新脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;1) update 2) commit&quot;</span><br><span class="line">read -p &quot;input:&quot; op</span><br><span class="line">case $op in </span><br><span class="line">    1)</span><br><span class="line">        git fetch origin master:temp</span><br><span class="line">        git merge temp</span><br><span class="line">        git branch -d temp</span><br><span class="line">        ;;</span><br><span class="line">    2)</span><br><span class="line">        git add .</span><br><span class="line">        git commit -m &apos;update&apos;</span><br><span class="line">        git push origin master</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo &quot;maybe something wrong.............&quot;</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="19-09-04更新"><a href="#19-09-04更新" class="headerlink" title="19/09/04更新"></a>19/09/04更新</h2><p>上面是个愚蠢的行为，定时脚本频率太过频繁，github已经把我IP封了<br>现在优化脚本，更新脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git fetch origin master:temp</span><br><span class="line">git merge temp</span><br><span class="line">git branch -d temp</span><br></pre></td></tr></table></figure><p>推送脚本如下(需要绑定密钥)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'update'</span></span><br><span class="line">git push -u origin master</span><br><span class="line">ssh root@推送的服务器IP &lt;&lt;EOF</span><br><span class="line"><span class="built_in">cd</span> /usr/blog</span><br><span class="line">sh ./update_blog.sh</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> git </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客hexo搭建</title>
      <link href="/2019/08/30/001%E6%90%AD%E5%BB%BAhexo%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/08/30/001%E6%90%AD%E5%BB%BAhexo%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>由于简书挂了，之前写的内容不能编辑，也无法记录新的内容，觉得有必要搭建一个属于个人的博客记录平台。<br>初步选择hexo，因为较为简单，且支持markdown，中文支持很好，后期服务器不想续费了也可以切到GitHub上，并且有着丰富的主题。<br>hexo 正常来说，不需要部署到我们的服务器上，我们的服务器上保存的，其实是基于在hexo通过markdown编写的文章，然后hexo帮我们生成静态的html页面，然后，将生成的html上传到我们的服务器。简而言之：hexo是个静态页面生成、上传的工具。<br><a href="http://dew667.xyz/2019/05/25/%E5%9C%A8Linux%E4%B8%8A%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84hexo%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">参考链接</a></p><h2 id="下载及解压node-js"><a href="#下载及解压node-js" class="headerlink" title="下载及解压node.js"></a>下载及解压node.js</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/soft &amp;&amp; <span class="built_in">cd</span> /home/soft</span><br><span class="line">wget https://cdn.npm.taobao.org/dist/node/v10.16.3/node-v10.16.3-linux-x64.tar.xz</span><br><span class="line">chmod +x node-v10.16.3-linux-x64.tar.xz</span><br><span class="line">xz -d node-v10.16.3-linux-x64.tar.xz</span><br><span class="line">cp ./node-v10.16.3-linux-x64.tar /opt/</span><br><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">tar -xvf node-v10.16.3-linux-x64.tar</span><br></pre></td></tr></table></figure><h2 id="设置node-js"><a href="#设置node-js" class="headerlink" title="设置node.js"></a>设置node.js</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /opt/node-v10.16.3-linux-x64/bin/npm /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">ln -s /opt/node-v10.16.3-linux-x64/bin/node /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure><p>验证是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">ln -s /opt/node-v10.16.3-linux-x64/lib/node_modules/hexo-cli/bin/hexo /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure><h2 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/blog &amp;&amp; <span class="built_in">cd</span> /usr</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">nohup hexo s &amp;</span><br></pre></td></tr></table></figure><h2 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h2><p>由于centos我开了防火墙，需要把服务对应端口开放</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port=4000/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>通过部署的ip加上端口号(默认4000)进行访问<br><a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /<span class="built_in">source</span>/_posts</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'this is a test!'</span>&gt;test.md</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line"><span class="built_in">cd</span> ../../ &amp;&amp; nohup hexo s &amp;</span><br></pre></td></tr></table></figure><h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p><a href="https://molunerfinn.com/hexo-theme-melody-doc/zh-Hans/theme-config.html#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">参考链接</a></p><h2 id="重启脚本"><a href="#重启脚本" class="headerlink" title="重启脚本"></a>重启脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">this_pid=`lsof -i:4000|awk <span class="string">'&#123;print $2&#125;'</span>|uniq|grep [0-9]`</span><br><span class="line"><span class="built_in">kill</span> -9 <span class="variable">$&#123;this_pid&#125;</span></span><br><span class="line"><span class="built_in">cd</span> /usr/blog</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">rm -f nohup.out hexo_server.log</span><br><span class="line">nohup hexo s &gt; hexo_server.log &amp;</span><br><span class="line">sleep 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> linux </tag>
            
            <tag> install </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
